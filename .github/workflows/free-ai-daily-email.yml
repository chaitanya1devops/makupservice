name: Daily Plan (GitHub notification)

on:
  schedule:
    # 8:00 AM IST = 02:30 UTC, Mon–Fri
    - cron: "30 2 * * 1-5"
  workflow_dispatch: {}

# Token needs write access to create/comment on issues
permissions:
  contents: read
  issues: write

jobs:
  notify:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Kolkata
      USERNAME: chaitanya1devops             # <-- change if your GitHub username differs
      ISSUE_TITLE: "Daily Plan Notifications" # one rolling issue reused daily
      HCM_LINK: "https://iazmqy.fa.ocs.oraclecloud.com/hcmUI/faces/FuseWelcome"
    steps:
      - name: Checkout (optional files support)
        uses: actions/checkout@v4

      - name: Build energetic message (Markdown + optional extras)
        id: build
        shell: bash
        run: |
          set -euo pipefail

          TODAY_HUMAN=$(date +"%A, %d %B %Y")
          DOW3=$(date +%a | tr '[:upper:]' '[:lower:]')   # mon/tue/wed...
          TODAY_ISO=$(date +%F)

          # Optional extra sections from repo (silently ignored if missing)
          read_file() { [ -f "$1" ] && cat "$1" || true; }

          ROUTINE="$(read_file tasks/routine.md)"
          WD_NOTE="$(read_file tasks/weekdays/${DOW3}.md)"
          DATE_NOTE="$(read_file tasks/dates/${TODAY_ISO}.md)"

          # Optional CSV: tasks/tasks.csv [date,time,task]
          CSV_TODAY=""
          if [ -f tasks/tasks.csv ]; then
            CSV_TODAY=$(awk -F, -v d="$TODAY_ISO" 'NR>1 && $1==d {print "- " $2 " — " $3}' tasks/tasks.csv | sort)
          fi

          # Lightweight "AI-ish" quote list (no external calls)
          QUOTES=(
            "Small consistent steps beat giant occasional leaps."
            "Discipline is the bridge between goals and accomplishment."
            "Focus on the next right move."
            "Momentum comes from starting."
            "Win the morning, win the day."
            "Progress, not perfection."
          )
          QIDX=$(( RANDOM % ${#QUOTES[@]} ))
          QUOTE="${QUOTES[$QIDX]}"

          # Build Markdown body
          cat > body.md <<'MD'
**🚀 Good Morning, Chaitanya!**

Here’s your energetic plan for **${TODAY}** — let’s own the day! 💪

### ✨ Routine (Mon–Fri)
- ⏰ **8:00** – Wake up & energize
- 📚 **8:00–10:00** – Learning / personal activities
- 🏋️ **10:00–11:30** – Gym
- 💡 **11:30–12:30** – Personal activities
- 🧑‍💼 **12:30–1:30** – Get ready for office
- 🚕 **1:30** – Cab pickup
- 💻 **2:00** – Punch in & start strong ([Open HCM](${HCM_LINK}))
- 🕚 **11:00** – Punch out
- 🏠 **11:30–12:30** – Personal time
- 🌙 **1:00** – Sleep & recharge

MD

          # Optional extras if present
          if [ -n "$ROUTINE" ]; then
            {
              echo "### 📋 Your routine file"
              echo ""
              echo "$ROUTINE"
              echo ""
            } >> body.md
          fi

          if [ -n "$WD_NOTE" ]; then
            {
              echo "### 🗓️ Today’s weekday notes"
              echo ""
              echo "$WD_NOTE"
              echo ""
            } >> body.md
          fi

          if [ -n "$DATE_NOTE" ]; then
            {
              echo "### 📅 Date-specific notes"
              echo ""
              echo "$DATE_NOTE"
              echo ""
            } >> body.md
          fi

          if [ -n "$CSV_TODAY" ]; then
            {
              echo "### ⏱️ Scheduled for today"
              echo ""
              echo "$CSV_TODAY"
              echo ""
            } >> body.md
          fi

          {
            echo "### 🔥 Quick Wins"
            echo "1. Triage emails & tickets (10m)"
            echo "2. Clear yesterday’s blockers (5m)"
            echo "3. Start one high-impact task"
            echo ""
            echo "> “${QUOTE}” ✅"
          } >> body.md

          # Inject dynamic values into template placeholders
          sed -i "s|\${TODAY}|${TODAY_HUMAN}|g" body.md
          sed -i "s|\${HCM_LINK}|${HCM_LINK}|g" body.md

          echo "bodyfile=body.md" >> "$GITHUB_OUTPUT"
          echo "subject=Your Energetic Daily Plan 🚀 — ${TODAY_HUMAN}" >> "$GITHUB_OUTPUT"

      - name: Ensure rolling issue exists (create if missing)
        id: ensure_issue
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const title = process.env.ISSUE_TITLE;

            // List open issues and find exact title (avoids advanced search)
            let page = 1, found = null;
            while (true) {
              const res = await github.rest.issues.listForRepo({owner, repo, state: 'open', per_page: 100, page});
              found = res.data.find(i => i.title === title);
              if (found || res.data.length < 100) break;
              page++;
            }

            if (!found) {
              const created = await github.rest.issues.create({
                owner, repo,
                title,
                body: "This issue collects your weekday Daily Plan notifications.\n\n_One comment per day._",
                assignees: [process.env.USERNAME],
                labels: ["daily-notify"]
              });
              found = created.data;
            }

            core.setOutput('issue_number', String(found.number));

      - name: Post today’s plan as a comment (triggers GitHub email)
        uses: actions/github-script@v7
        env:
          BODY_PATH: ${{ steps.build.outputs.bodyfile }}
          USERNAME: ${{ env.USERNAME }}
          ISSUE_NUMBER: ${{ steps.ensure_issue.outputs.issue_number }}
        with:
          script: |
            const {owner, repo} = context.repo;
            const fs = require('fs');
            const bodyMd = fs.readFileSync(process.env.BODY_PATH, 'utf8');
            const text = `@${process.env.USERNAME}\n\n${bodyMd}`;

            // Assign + comment to maximize notifications
            await github.rest.issues.addAssignees({
              owner, repo,
              issue_number: Number(process.env.ISSUE_NUMBER),
              assignees: [process.env.USERNAME]
            });

            await github.rest.issues.createComment({
              owner, repo,
              issue_number: Number(process.env.ISSUE_NUMBER),
              body: text
            });

      - name: Log preview (subject + markdown)
        run: |
          echo "::group::SUBJECT"
          echo "${{ steps.build.outputs.subject }}"
          echo "::endgroup::"
          echo "::group::BODY (Markdown)"
          cat "${{ steps.build.outputs.bodyfile }}"
          echo "::endgroup::"
