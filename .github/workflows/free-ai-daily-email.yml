name: Free AI Daily Routine Email

on:
  schedule:
    # 8:00 AM IST = 02:30 UTC (Mon–Fri)
    - cron: "30 2 * * 1-5"
  workflow_dispatch: {}

jobs:
  email:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Kolkata
      HF_HOME: ${{ github.workspace }}/.hf-cache   # cache model between runs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore Hugging Face cache
        uses: actions/cache@v4
        with:
          path: .hf-cache
          key: hf-cache-${{ runner.os }}-smollm2-360m
          restore-keys: |
            hf-cache-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install "transformers>=4.43" "accelerate>=0.33" "sentencepiece>=0.2" "sacremoses" "pandas"

      - name: Build context files
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          TODAY=$(date +%F)
          DOWL=$(date +%A) # Monday...
          DOW3=$(echo "$DOWL" | awk '{print tolower(substr($0,1,3))}') # mon/tue/...

          read_file(){ [ -f "$1" ] && cat "$1" || true; }

          ROUTINE="$(read_file tasks/routine.md)"
          WEEKDAY="$(read_file tasks/weekdays/${DOW3}.md)"
          DATENOTE="$(read_file tasks/dates/${TODAY}.md)"

          # Optional CSV tasks for today
          if [ -f tasks/tasks.csv ]; then
            TODAYLIST=$(awk -F, -v d="$TODAY" 'NR>1 && $1==d {print $2 " — " $3}' tasks/tasks.csv | sort)
          else
            TODAYLIST=""
          fi

          printf "%s" "$ROUTINE" > /tmp/routine.md
          printf "%s" "$WEEKDAY" > /tmp/weekday.md
          printf "%s" "$DATENOTE" > /tmp/datenote.md
          printf "%s" "$TODAYLIST" > /tmp/todaylist.txt

          echo "dow=$DOWL" >> $GITHUB_OUTPUT

      - name: Generate HTML email with free OSS model
        id: gen
        shell: bash
        run: |
          cat > gen_email.py << 'PY'
          import os, datetime
          from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline

          MODEL_ID = "HuggingFaceTB/SmolLM2-360M-Instruct"

          def read(path):
            return open(path, "r", encoding="utf-8").read().strip() if os.path.exists(path) else ""

          routine   = read("/tmp/routine.md")
          weekday   = read("/tmp/weekday.md")
          datenote  = read("/tmp/datenote.md")
          todaylist = read("/tmp/todaylist.txt")

          today_human = datetime.datetime.now().strftime("%a, %d %b %Y")

          system_prompt = (
            "You are a concise executive assistant. "
            "Write a morning email as clean HTML5 (no external CSS/JS). "
            "Sections: <h2>Schedule</h2>, <h2>Top 3 Priorities</h2>, <h2>Quick Wins</h2>. "
            "Use <ul><li> bullets, keep total under 220 words, and end with a one-line motivational nudge in <blockquote>. "
            "If 14:00 punch-in or 23:00 punch-out are missing, include them in Schedule. "
            "Return ONLY a complete HTML document starting with <!doctype html>."
          )

          user_prompt = f"""
          Context
          -------
          Date: {today_human}
          Fixed routine (Mon–Fri):
          ---
          {routine}
          ---
          Weekday extras:
          ---
          {weekday}
          ---
          Date-specific notes:
          ---
          {datenote}
          ---
          Items scheduled for today:
          ---
          {todaylist}
          ---

          Requirements
          ------------
          - Subject line (text only): Today’s Plan — {today_human}
          - Then full HTML email body (complete HTML doc)
          """

          tok = AutoTokenizer.from_pretrained(MODEL_ID, trust_remote_code=True)
          mdl = AutoModelForCausalLM.from_pretrained(MODEL_ID, trust_remote_code=True)
          gen = pipeline("text-generation", model=mdl, tokenizer=tok, device_map="auto")

          prompt = (
            f"<|system|>\n{system_prompt}\n</|system|>\n"
            f"<|user|>\n{user_prompt}\n</|user|>\n<|assistant|>\n"
          )

          out = gen(prompt, max_new_tokens=550, do_sample=True, temperature=0.6, top_p=0.9)[0]["generated_text"]
          # Extract just the assistant part if tags leaked
          start = out.rfind("<|assistant|>")
          content = out[start+len("<|assistant|>"):] if start != -1 else out

          # First line is the subject, then the HTML
          lines = [l for l in content.splitlines() if l.strip()]
          subject = lines[0].strip() if lines else f"Today’s Plan — {today_human}"
          html = "\n".join(lines[1:]).strip() if len(lines) > 1 else f"<!doctype html><html><body><p>Have a focused day!</p></body></html>"

          # Minimal guard: ensure we have an HTML doc
          if "<html" not in html.lower():
            html = f"<!doctype html><html><body>{html}</body></html>"

          open("subject.txt","w",encoding="utf-8").write(subject)
          open("body.html","w",encoding="utf-8").write(html)
          PY

          python gen_email.py
          echo "subject=$(cat subject.txt)" >> $GITHUB_OUTPUT
          echo "htmlfile=body.html" >> $GITHUB_OUTPUT

      - name: Send email (HTML)
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          from: ${{ secrets.MAIL_FROM }}
          to: ${{ secrets.MAIL_TO }}
          subject: ${{ steps.gen.outputs.subject }}
          html_body: file:${{ steps.gen.outputs.htmlfile }}
